---
title: "U2AF2 invitro iCLIP analysis"
date: last-modified
author: 
    - name:  "Srimeenakshi Sankaranarayanan"
      
title-block-banner: true
format: 
    html:
        theme: flatly
        self-contained: true
        code-fold: true
        code-tools: true
        code-summary: "Show the code"
        toc: true
        number-sections: true
        anchor-sections: true
editor: visual
execute:
  echo: true
  error: false
  warning: false
  message: false
---

```{r libraries}
library(BSgenome.Hsapiens.UCSC.hg38)
library(ggplot2)
library(BindingSiteFinder)
library(rtracklayer)
library(ComplexHeatmap)
library(GenomicFeatures)
library(forcats)
library(tidyr)
library(dplyr)
library(tidyverse)
library(GenomicRanges)
library(magick)
library(magrittr)
library(gridExtra)
library(IRanges)
library(Biostrings)
library(ggpp)
library(gginnards)
library(ggrepel)
library(ggpubr)
library(ggforce)
library(ggrastr)
library(viridis)
library(reshape2)
library(gprofiler2)
library(ggsci)
library(ggh4x)
library(ggplotify)
library(gridExtra)
library(circlize)
library(EnrichedHeatmap)
library(UpSetR)
library(kableExtra)
library(cowplot)
library(rstatix)
library(beeswarm)
library(clusterProfiler)
library(ggseqlogo)
library(tidyHeatmap)
library(DESeq2)
library(ggExtra)
library(paletteer)
```

U2AF2 or U2AF65 along with U2AF1 forms U2 auxillary factor (U2AF) and contributes to the binding of U2 snRNP to the pre-mRNA branch site. U2AF2 recongizes the polypyrimidine tract preceding the 3´ splice site, the binding of which follows Splice Factor 1 (SF1) binding at the branch point site. Apparantly, phosphorylation of serine residues in the RSGSG motif of SF1 facilitate the recognition of sub-optimal branch point site.

Instead of defining the binding sites separately, we want to get all the signal within the 3´ splice sites and normalize them to the total signal on the oligo, thereby, identifying the effect of SF1 and pSF1 binding on the 3´ splice site binding of U2AF2.

![invitro signal normalization](C:/Users\Sri\Documents\Bioinfo_analysis\iCLIP_higherEUK\U2AF2\Project\Planning\Image.png)

```{r path}
data.dir = "C:\\Users\\Sri\\Documents\\Bioinfo_analysis\\iCLIP_higherEUK\\U2AF2\\Project\\data\\normalized\\spikein_norm_bw_files"

```

```{r oligo}
import.oligo = import.bed("C:\\Users\\Sri\\Documents\\Bioinfo_analysis\\iCLIP_higherEUK\\U2AF2\\Data_Steffi\\Freeze2_paired_end_mapping\\oligo_library\\Nitin_oligos.bed")

import.oligo$oligo_ID = paste0("oligo_",1:length(import.oligo))

# plus
oligo_plus = import.oligo[strand(import.oligo)=="+"]
#minus
oligo_minus = import.oligo[strand(import.oligo)=="-"]

oligo_all = c(plus=oligo_plus, minus=oligo_minus)
```

The oligos used in this study are 182-nt long with the last 50-nt being the exon. To define the 3´ splice site region, we consider the final 41-nt of the intron region. This is because in Sutandy et.al (2018), Steffi has defined the 41-nt window upstream from the AG nucleotide as a 3´ splice site.

## Define the 3´ splice site region

```{r 3´ssregion}
# get 3´splicesite region
oligo_start_131nt = lapply(oligo_all, function(oligo_start){
  return(oligo_start =  resize(oligo_start, fix="start", width = 132))
})

# sanity check: last two nt is AG
# take the last two nucleotide
oligo_end = lapply(oligo_start_131nt, function(oligo_end){
  return(oligo_end =  resize(oligo_end, fix="end", width = 2))
})
# display the nucleotide
lapply(oligo_end, function(oligo_end_string){
  return(getSeq(BSgenome.Hsapiens.UCSC.hg38, oligo_end_string))
})


# 3´splice site region
oligo_three_SSRgn = lapply(oligo_start_131nt, function(three_splicesite_region){
  return(resize(three_splicesite_region, fix= "end", width = 41))})


```

```{r invitro.data}

# invitro data plus
invitro_data_plus =  grep("plus", list.files(data.dir, full.names = T), value = T)[c(1:3, 7:9, 4:6)]
# invitro data minus
invitro_data_minus = grep("minus", list.files(data.dir, full.names = T), value = T)[c(1:3, 7:9, 4:6)]


#invitro_data_plus
```

## Sum of invitro signal within the 3´ splice site region

```{r three splic site region}
# make a matrix and fill it with 0
signal= lapply(oligo_three_SSRgn, function(matrixDimension){
  matrix(0, nrow = length(matrixDimension), ncol = 9)
})

# plus signal
signal_3SS_plus = signal$plus # plus

for (i in 1:length(invitro_data_plus)){
  gr = import(invitro_data_plus[i], as = "Rle")
  signal_3SS_plus[, i] = sum(gr[oligo_three_SSRgn$plus])}


signal_3SS_minus = signal$minus # minus

for (i in 1:length(invitro_data_minus)){
  gr = import(invitro_data_minus[i], as = "Rle")
  signal_3SS_minus[,i] = sum(gr[oligo_three_SSRgn$minus])
}


```

## Sum of invitro signal within the total oligo

```{r}

signal_plus_total = signal$plus

for(i in 1:length(invitro_data_plus)){
  gr = import(invitro_data_plus[i], as = "Rle")
  signal_plus_total[,i] = sum(gr[oligo_all$plus])
  }

signal_minus_total = signal$minus

for(i in 1:length(invitro_data_minus)){
  gr = import(invitro_data_minus[i], as = "Rle")
  signal_minus_total[,i] = sum(gr[oligo_all$minus])
}

```

## remove oligos with little signal

To do that, we set three rules:

the rowmean of the 3´SS region column should not be 0,

```{r}
# plus 
idx_plus= which(rowSums(signal_3SS_plus) > 0 & 
  (rowMeans(signal_3SS_plus[, 1:3]) > quantile(rowMeans(signal_3SS_plus[, 1:3]), 0.25) |
   rowMeans(signal_3SS_plus[, 4:6]) > quantile(rowMeans(signal_3SS_plus[, 4:6]), 0.25) |
   rowMeans(signal_3SS_plus[, 7:9]) > quantile(rowMeans(signal_3SS_plus[, 7:9]), 0.25) ) & 
   
    (rowMeans(signal_plus_total[, 1:3]) > quantile(rowMeans(signal_plus_total[, 1:3]), 0.25) |
     rowMeans(signal_plus_total[, 4:6]) > quantile(rowMeans(signal_plus_total[, 4:6]), 0.25) |
     rowMeans(signal_plus_total[, 7:9]) > quantile(rowMeans(signal_plus_total[, 7:9]), 0.25) ) )
# filter oligos that satisfy the above condition
# 3´ splice site region
signal_3SS_plus_filter = signal_3SS_plus[idx_plus,]
# total oligos
signal_total_plus_filter = signal_plus_total[idx_plus,]

three_SS_to_Total_plus = signal_3SS_plus_filter/signal_total_plus_filter

```

```{r}
# minus 
idx_minus= which(rowSums(signal_3SS_minus) > 0 & 
  (rowMeans(signal_3SS_minus[, 1:3]) > quantile(rowMeans(signal_3SS_minus[, 1:3]), 0.25) |
   rowMeans(signal_3SS_minus[, 4:6]) > quantile(rowMeans(signal_3SS_minus[, 4:6]), 0.25) |
   rowMeans(signal_3SS_minus[, 7:9]) > quantile(rowMeans(signal_3SS_minus[, 7:9]), 0.25) ) & 
   
    (rowMeans(signal_minus_total[, 1:3]) > quantile(rowMeans(signal_minus_total[, 1:3]), 0.25) |
     rowMeans(signal_minus_total[, 4:6]) > quantile(rowMeans(signal_minus_total[, 4:6]), 0.25) |
     rowMeans(signal_minus_total[, 7:9]) > quantile(rowMeans(signal_minus_total[, 7:9]), 0.25) ) )

# filter oligos that satisfy the above condition
#3´ splice site region
signal_3SS_minus_filter = signal_3SS_minus[idx_minus,]
# total oligos
signal_total_minus_filter = signal_minus_total[idx_minus,]

# normalize the signal on the 3´splice site by total signal on the oligos
three_SS_to_Total_minus = signal_3SS_minus_filter/signal_total_minus_filter

```

## comparison of signal between 3´ splice site and the entire oligos

### without library normalization

```{r}
# combine the plus and minus signal 
# 3´ splice site region
three_SS_signal = rbind(signal_3SS_plus_filter, signal_3SS_minus_filter)
# assign colnames
colnames(three_SS_signal) = c("50U65_1","50U65_2", "50U65_3", "50U65_SF1_1", "50U65_SF1_2", "50U65_SF1_3", "50U65_pSF1_1", "50U65_pSF1_2", "50U65_pSF1_3")
 
# total oligo
total_oligo_signal = rbind(signal_total_plus_filter, signal_total_minus_filter)
# assign colnames
colnames(total_oligo_signal) = c("50U65_1","50U65_2", "50U65_3", "50U65_SF1_1", "50U65_SF1_2", "50U65_SF1_3", "50U65_pSF1_1", "50U65_pSF1_2", "50U65_pSF1_3")

```

```{r}
# make a list 
signal_combined = list(three_splice_site =  three_SS_signal, total_oligos=total_oligo_signal)

# take replicate mean
signal_combined_sum = lapply(signal_combined, function(rowSumReplicates){
  signal_mergeRep = matrix(0,nrow=nrow(rowSumReplicates), ncol = 3)
  for(i in 1:nrow(rowSumReplicates)){
    
    signal_mergeRep[i, 1] = mean(rowSumReplicates[i,1:3], na.rm = TRUE)
    signal_mergeRep[i, 2] = mean(rowSumReplicates[i,4:6], na.rm = TRUE)
    signal_mergeRep[i, 3] = mean(rowSumReplicates[i,7:9], na.rm = TRUE)
  }
  return(signal_mergeRep)
}) %>% do.call(cbind,.)

# make a matrix list
ssignal_combined_mx_ls = list(U65 = signal_combined_sum[,c(1,4)], 
                                U65_SF1 = signal_combined_sum[,c(2,5)], 
                                U65_pSF1 = signal_combined_sum[,c(3,6)]) %>% 
  map(~ .x %>% apply(c(1, 2), log2))
```

#### combined result

```{r}
signal_combined_df =  lapply(ssignal_combined_mx_ls, function(max){
    df = max %>% data.frame 
    return(df) 
    })

signal_combined_df = lapply(names(signal_combined_df), function(row_value){
      df = signal_combined_df[[row_value]]
      df = df %>% set_colnames(., c("three_ss_counts", "total_oligos_counts")) %>% mutate(category = row_value)
      return(df)
    }) %>% do.call(rbind,.)


# divide by 1000 to make the dataframe manageable
ggMarginal(
    ggplot(signal_combined_df, aes(x=total_oligos_counts, y=three_ss_counts, col=category)) +
        geom_point(alpha=.5) +
        scale_color_paletteer_d("PrettyCols::Bold") +
        geom_smooth(method="lm") +
        labs(x="total signal on oligos [log2]", y="total signal on 3´splice site [log2]") +
        theme_bw()+
        theme(aspect.ratio = 1/1, legend.position = "bottom"),
type="density", groupFill=TRUE
)



```

When the sequencing data is not normalized, the overall signal in the SF1 and pSF1 datasets is significantly higher compared to the datasets where these factors are absent. Additionally, the signal in the SF1 dataset is marginally greater than that in the pSF1 dataset. However, this is not surprising as the library depth is also higher for these two data.

Therefore, I proceeded to normalize the sequencing data for depth using DESeq2.

### with library normalization using DESeq2

```{r DESeq_three_splice_Site}
# store 3´ss signal in a new variable
three_SS_mx = three_SS_signal
# as integer
storage.mode(three_SS_mx) = "integer"

# DeseqDataset from Matrix
three_SS_sig_dds = DESeqDataSetFromMatrix(
    countData = three_SS_mx,
    colData = data.frame(
        condition=colnames(three_SS_signal),
        rep=rep(1:3,3)),
    design = ~ condition)

# estimate size factors
three_SS_sig_dds = estimateSizeFactors(three_SS_sig_dds)

# normalize the data
# log2 transform
three_ss_log2_ntrafo = normTransform(three_SS_sig_dds) %>% assay
#three_ss_log2_counts_normF = DESeq2::counts(three_SS_sig_dds, normalized = FALSE)
# counts_normalized
three_ss_counts_normT = DESeq2::counts(three_SS_sig_dds, normalized = TRUE)
```

```{r DESeq_total_oligos}
# store 3´ss signal in a new variable
total_oligo_mx = total_oligo_signal
# as integer
storage.mode(total_oligo_mx) = "integer"

# DeseqDataset from Matrix
total_oligo_sig_dds = DESeqDataSetFromMatrix(
    countData = total_oligo_mx,
    colData = data.frame(
        condition=colnames(total_oligo_mx),
        rep=rep(1:3,3)),
    design = ~ condition)

# estimate size factors
total_oligo_sig_dds = estimateSizeFactors(total_oligo_sig_dds)

# normalize the data
# log2 transform
total_oligo_log2_ntrafo = normTransform(total_oligo_sig_dds) %>% assay
#three_ss_log2_counts_normF = DESeq2::counts(three_SS_sig_dds, normalized = FALSE)
# counts_normalized
#total_oligo_counts_normT = DESeq2::counts(total_oligo_sig_dds, normalized = TRUE)
```

```{r}
# make a list 
signal_log2_ntrafo = list(three_splice_site =  three_ss_log2_ntrafo, total_oligos=total_oligo_log2_ntrafo)

# take replicate mean
signal_log2_ntrafo_mean = lapply(signal_log2_ntrafo, function(rowSumReplicates){
  signal_mergeRep = matrix(0,nrow=nrow(rowSumReplicates), ncol = 3)
  for(i in 1:nrow(rowSumReplicates)){
    
    signal_mergeRep[i, 1] = mean(rowSumReplicates[i,1:3], na.rm = TRUE)
    signal_mergeRep[i, 2] = mean(rowSumReplicates[i,4:6], na.rm = TRUE)
    signal_mergeRep[i, 3] = mean(rowSumReplicates[i,7:9], na.rm = TRUE)
  }
  return(signal_mergeRep)
}) %>% do.call(cbind,.)


# make a matrix list
signal_log2_ntrafo_mx_ls = list(U65 = signal_log2_ntrafo_mean[,c(1,4)], 
                                U65_SF1 = signal_log2_ntrafo_mean[,c(2,5)], 
                                U65_pSF1 = signal_log2_ntrafo_mean[,c(3,6)]) 


signal_log2_ntrafo_df =  lapply(signal_log2_ntrafo_mx_ls, function(max){
    df = max %>% data.frame 
    return(df) 
    })

signal_log2_ntrafo_df = lapply(names(signal_log2_ntrafo_df), function(row_value){
      df = signal_log2_ntrafo_df[[row_value]]
      df = df %>% set_colnames(., c("three_ss_counts", "total_oligos_counts")) %>% mutate(category = row_value)
      return(df)
    }) %>% do.call(rbind,.)


ggMarginal(
    ggplot(signal_log2_ntrafo_df, aes(x=total_oligos_counts, y=three_ss_counts, col=category)) +
        geom_point(alpha=.5) +
        scale_color_paletteer_d("PrettyCols::Bold") +
        geom_smooth(method="lm") +
        labs(x="total signal on oligos [log2]", y="total signal on 3´splice site [log2]") +
        theme_bw()+
        theme(aspect.ratio = 1/1, legend.position = "bottom"),
type="density", groupFill=TRUE
)

   
```

After normalizing the data, no significant changes were observed. However, there was a slight overall increase in signal when SF1 and pSF1 were present, with no discernible differences between the 3´splice site and total oligos.

## session Info

```{r}
sessionInfo()
```
